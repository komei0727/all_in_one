name: Deploy Branch CI

on:
  push:
    branches:
      - deploy

env:
  NODE_VERSION: '20.19.2'

permissions:
  contents: read
  deployments: write
  pages: write
  id-token: write

jobs:
  ci:
    name: CI Pipeline for Deploy Branch
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: all_in_one_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Generate Prisma client for tests
        run: pnpm prisma generate --schema=./prisma/schema.test.prisma

      # CI checks
      - name: Type check
        run: pnpm type-check

      - name: Lint check
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Run unit tests
        run: pnpm test:unit

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: file:./test.db

      # カバレッジレポートの生成
      - name: Run all tests with coverage
        run: pnpm test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/all_in_one_test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Build check
        run: pnpm build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/all_in_one_test

      # Vercelデプロイの確認（Preview環境、カスタムヘルスチェック）
      - name: Wait for Vercel Preview with Custom Health Check
        id: waitForVercel
        run: |
          echo "⏳ Waiting for preview deployment health check..."

          # デプロイURL（Preview環境）
          DEPLOYMENT_URL="https://all-in-one-git-deploy-komei0727s-projects.vercel.app"
          HEALTH_URL="${DEPLOYMENT_URL}/api/health"

          # リトライ設定
          MAX_ATTEMPTS=20
          DELAY_SECONDS=15
          SUCCESS=false

          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Health check attempt $i/$MAX_ATTEMPTS..."

            # ヘルスチェック実行
            if response=$(curl -s -w "%{http_code}" "$HEALTH_URL" --connect-timeout 10 --max-time 30); then
              http_code="${response: -3}"
              body="${response%???}"

              echo "📊 HTTP Status: $http_code"

              # HTTPステータスが200でstatus: okの場合
              if [ "$http_code" = "200" ]; then
                if echo "$body" | jq -e '.status == "ok"' > /dev/null 2>&1; then
                  echo "✅ Health check passed!"
                  echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
                  SUCCESS=true
                  break
                fi
              fi
            else
              echo "❌ Connection failed"
            fi

            if [ $i -lt $MAX_ATTEMPTS ]; then
              echo "⏱️ Waiting ${DELAY_SECONDS}s before next attempt..."
              sleep $DELAY_SECONDS
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "💥 Health check failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

      - name: Preview Deploy Summary
        run: |
          echo "🚀 Deploy branch has been updated and deployed to preview environment"
          echo "Preview URL: ${{ steps.waitForVercel.outputs.deployment_url }}"

  # カバレッジレポートをGitHub Pagesにデプロイ
  deploy-coverage:
    name: Deploy Coverage to GitHub Pages
    needs: ci
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Coverage Deploy Summary
        run: |
          echo "📊 Coverage report deployed to GitHub Pages"
          echo "Coverage URL: ${{ steps.deployment.outputs.page_url }}"
