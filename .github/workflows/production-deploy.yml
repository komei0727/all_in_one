name: Production Deploy

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '20.19.2'

permissions:
  contents: write
  deployments: write

jobs:
  ci:
    name: Production CI Pipeline
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: all_in_one_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Generate Prisma client for tests
        run: pnpm prisma generate --schema=./prisma/schema.test.prisma

      - name: Type check
        run: pnpm type-check

      - name: Lint check
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Run unit tests
        run: pnpm test:unit

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: file:./test.db

      # - name: Run E2E tests
      #   run: pnpm test:e2e
      #   env:
      #     DATABASE_URL: file:./test.db

      - name: Run all tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/all_in_one_test

      - name: Build
        run: pnpm build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/all_in_one_test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

      # Vercel本番デプロイの確認（カスタムヘルスチェック）
      - name: Wait for Vercel Production with Custom Health Check
        id: waitForVercel
        run: |
          echo "⏳ Waiting for production deployment health check..."

          # デプロイURL
          DEPLOYMENT_URL="https://all-in-one-orcin.vercel.app"
          HEALTH_URL="${DEPLOYMENT_URL}/api/health?detailed=true"

          # リトライ設定
          MAX_ATTEMPTS=30
          DELAY_SECONDS=20
          SUCCESS=false

          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Health check attempt $i/$MAX_ATTEMPTS..."
            
            # ヘルスチェック実行
            if response=$(curl -s -w "%{http_code}" "$HEALTH_URL" --connect-timeout 10 --max-time 30); then
              http_code="${response: -3}"
              body="${response%???}"
              
              echo "📊 HTTP Status: $http_code"
              echo "📋 Response: $body"
              
              # HTTPステータスが200の場合
              if [ "$http_code" = "200" ]; then
                # JSONレスポンスからステータスを確認
                if echo "$body" | jq -e '.status == "ok" and .checks.ready == true' > /dev/null 2>&1; then
                  echo "✅ Health check passed! Service is ready."
                  echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
                  echo "health_status=healthy" >> $GITHUB_OUTPUT
                  SUCCESS=true
                  break
                elif echo "$body" | jq -e '.status == "ok"' > /dev/null 2>&1; then
                  echo "⚠️ Service is running but not fully ready (database might be initializing)"
                else
                  echo "❌ Service returned error status"
                fi
              else
                echo "❌ HTTP error: $http_code"
              fi
            else
              echo "❌ Connection failed"
            fi
            
            if [ $i -lt $MAX_ATTEMPTS ]; then
              echo "⏱️ Waiting ${DELAY_SECONDS}s before next attempt..."
              sleep $DELAY_SECONDS
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "💥 Health check failed after $MAX_ATTEMPTS attempts"
            echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Production Deploy Summary
        run: |
          echo "✅ Successfully deployed to production!"
          echo "Production URL: ${{ steps.waitForVercel.outputs.deployment_url }}"
          echo "Health Status: ${{ steps.waitForVercel.outputs.health_status }}"
          echo "Commit SHA: ${{ github.sha }}"

      # GitHubリリースの自動作成（オプション）
      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Production Release ${{ github.sha }}
          body: |
            ## 🚀 Production Deployment

            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            **Message:** ${{ github.event.head_commit.message }}

            **Production URL:** ${{ steps.waitForVercel.outputs.deployment_url }}
          draft: false
          prerelease: false
