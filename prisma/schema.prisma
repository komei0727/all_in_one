// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

// Storage location enum for ingredients
enum StorageLocation {
  REFRIGERATED     // 冷蔵
  FROZEN          // 冷凍
  ROOM_TEMPERATURE // 常温
}

// Unit type enum
enum UnitType {
  COUNT   // 個数
  WEIGHT  // 重量
  VOLUME  // 容量
}

// User status enum for user authentication
enum UserStatusType {
  ACTIVE      // アクティブ
  DEACTIVATED // 無効化
}

// Stock operation type enum
enum OperationType {
  CONSUME   // 消費
  REPLENISH // 補充
  ADJUST    // 調整
}

// ==================== NEXTAUTH TABLES ====================

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  domainUser  DomainUser?

  @@map("users")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==================== DOMAIN USER TABLES ====================

// Domain User model - extends NextAuth User with domain-specific information
model DomainUser {
  id                String          @id @default(cuid())
  nextAuthId        String          @unique
  email             String          @unique
  displayName       String?
  preferredLanguage String          @default("ja")
  timezone          String          @default("Asia/Tokyo")
  status            UserStatusType  @default(ACTIVE)
  lastLoginAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  nextAuthUser      User            @relation(fields: [nextAuthId], references: [id], onDelete: Cascade)

  @@index([nextAuthId])
  @@index([email])
  @@index([status])
  @@map("domain_users")
}

// ==================== MASTER TABLES ====================

// Category model - represents ingredient categories
model Category {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  displayOrder Int          @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  ingredients  Ingredient[]

  @@index([displayOrder])
  @@index([isActive])
  @@map("categories")
}

// Unit model - represents measurement units
model Unit {
  id           String       @id @default(cuid())
  name         String
  symbol       String       @unique
  type         UnitType
  description  String?
  displayOrder Int          @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  stocks       IngredientStock[]

  @@index([type])
  @@index([displayOrder])
  @@index([isActive])
  @@map("units")
}

// ==================== TRANSACTION TABLES ====================

// Ingredient model - main model for food ingredients
model Ingredient {
  id               String           @id @default(cuid())
  name             String
  categoryId       String
  memo             String?          // メモ
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?        // 論理削除
  createdBy        String?          // 作成者
  updatedBy        String?          // 更新者

  // Relations
  category         Category         @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stocks           IngredientStock[]
  stockHistories   IngredientStockHistory[]

  @@unique([name, categoryId, deletedAt])
  @@index([categoryId])
  @@index([deletedAt])
  @@index([name, deletedAt])
  @@map("ingredients")
}

// Ingredient stock model - tracks current stock levels
model IngredientStock {
  id                    String           @id @default(cuid())
  ingredientId          String
  quantity              Float            // 現在の在庫数量
  unitId                String
  storageLocationType   StorageLocation  // 保管場所タイプ
  storageLocationDetail String?          // 保管場所の詳細
  bestBeforeDate        DateTime?        // 賞味期限
  useByDate             DateTime?        // 消費期限
  purchaseDate          DateTime         // 購入日
  price                 Decimal?         @db.Decimal(10, 2)  // 価格（小数点対応）
  isActive              Boolean          @default(true)  // アクティブな在庫かどうか
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  deletedAt             DateTime?        // 論理削除
  createdBy             String?          // 作成者
  updatedBy             String?          // 更新者

  // Relations
  ingredient            Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unit                  Unit             @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([ingredientId, isActive])
  @@index([purchaseDate])
  @@index([bestBeforeDate])
  @@index([useByDate])
  @@index([deletedAt])
  @@index([bestBeforeDate, useByDate, isActive]) // 期限チェック用複合インデックス
  @@map("ingredient_stocks")
}

// ==================== HISTORY TABLES ====================

// Stock history model - tracks all stock changes
model IngredientStockHistory {
  id               String           @id @default(cuid())
  ingredientId     String
  operationType    OperationType    // 操作種別
  quantityChange   Float            // 数量変更（消費時は負数）
  quantityBefore   Float            // 変更前の数量
  quantityAfter    Float            // 変更後の数量
  reason           String?          // 変更理由
  operatedAt       DateTime         @default(now())
  operatedBy       String           // 操作ユーザーID

  // Relations
  ingredient       Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ingredientId, operatedAt])
  @@index([operationType, operatedAt])
  @@map("ingredient_stock_histories")
}

// ==================== EVENT STORE ====================

// Domain events model - event sourcing
model DomainEvent {
  id               String           @id @default(cuid())
  aggregateId      String           // 集約ID
  aggregateType    String           // 集約タイプ
  eventType        String           // イベントタイプ
  eventData        Json             // イベントデータ（JSONB）
  eventVersion     Int              // イベントバージョン
  occurredAt       DateTime         // イベント発生日時
  userId           String           // ユーザーID
  correlationId    String?          // 相関ID
  createdAt        DateTime         @default(now())

  @@index([aggregateId, aggregateType, occurredAt])
  @@index([eventType, occurredAt])
  @@index([correlationId])
  @@map("domain_events")
}