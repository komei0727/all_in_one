// This is your Prisma schema file for testing with SQLite
// It mirrors the main schema but with SQLite-compatible settings

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-test"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================
// SQLite doesn't support enums, so we use strings with @db.Text

// ==================== NEXTAUTH TABLES ====================

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  domainUser  DomainUser?

  @@map("users")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==================== DOMAIN USER TABLES ====================

// Domain User model - extends NextAuth User with domain-specific information
model DomainUser {
  id                String          @id @default(cuid())
  nextAuthId        String          @unique
  email             String          @unique
  displayName       String?
  preferredLanguage String          @default("ja")
  timezone          String          @default("Asia/Tokyo")
  theme             String          @default("light")
  notifications     Boolean         @default(true)
  emailFrequency    String          @default("weekly")
  status            String          @default("ACTIVE") // SQLite: Use String instead of enum
  lastLoginAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  nextAuthUser      User            @relation(fields: [nextAuthId], references: [id], onDelete: Cascade)
  ingredients       Ingredient[]    @relation("UserIngredients")
  shoppingSessions  ShoppingSession[] @relation("UserShoppingSessions")

  @@index([nextAuthId])
  @@index([email])
  @@index([status])
  @@map("domain_users")
}

// ==================== MASTER TABLES ====================

// Category model - represents ingredient categories
model Category {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  displayOrder Int          @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  ingredients  Ingredient[]

  @@index([displayOrder])
  @@index([isActive])
  @@map("categories")
}

// Unit model - represents measurement units
model Unit {
  id           String       @id @default(cuid())
  name         String
  symbol       String       @unique
  type         String       // SQLite: Use String instead of enum
  description  String?
  displayOrder Int          @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  ingredients  Ingredient[]

  @@index([type])
  @@index([displayOrder])
  @@index([isActive])
  @@map("units")
}

// ==================== TRANSACTION TABLES ====================

// Ingredient model - main model for food ingredients
model Ingredient {
  id                     String           @id @default(cuid())
  userId                 String           // ユーザーID（所有者）
  name                   String
  categoryId             String
  memo                   String?          // メモ
  price                  Decimal?         // 価格（小数点対応）
  purchaseDate           DateTime         // 購入日
  // 在庫情報（値オブジェクト）
  quantity               Float            // 在庫数量
  unitId                 String           // 単位ID
  threshold              Float?           // 在庫閾値
  // 保存場所（値オブジェクト）
  storageLocationType    String           // 保管場所タイプ (SQLite: String)
  storageLocationDetail  String?          // 保管場所の詳細
  // 期限情報（値オブジェクト）
  bestBeforeDate         DateTime?        // 賞味期限
  useByDate              DateTime?        // 消費期限
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  deletedAt              DateTime?        // 論理削除

  // Relations
  user                   DomainUser       @relation("UserIngredients", fields: [userId], references: [id], onDelete: Restrict)
  category               Category         @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  unit                   Unit             @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stockHistories         IngredientStockHistory[]
  shoppingSessionItems   ShoppingSessionItem[]

  // ユニーク制約: 同一ユーザー内での食材・期限・保存場所の組み合わせ重複を防ぐ
  @@unique([userId, name, bestBeforeDate, useByDate, storageLocationType, storageLocationDetail, deletedAt])
  @@index([userId])
  @@index([categoryId])
  @@index([deletedAt])
  @@index([userId, name, deletedAt])
  @@index([bestBeforeDate, useByDate])
  @@index([storageLocationType])
  @@index([userId, categoryId, deletedAt]) // 買い物モード最適化用
  @@index([quantity, threshold])           // 在庫状態判定用
  @@index([updatedAt])                     // 最終更新日時順ソート用
  @@map("ingredients")
}

// Note: IngredientStock has been integrated into Ingredient model as value objects

// ==================== HISTORY TABLES ====================

// Stock history model - tracks all stock changes
model IngredientStockHistory {
  id               String           @id @default(cuid())
  ingredientId     String
  operationType    String           // SQLite: Use String instead of enum
  quantityChange   Float            // 数量変更（消費時は負数）
  quantityBefore   Float            // 変更前の数量
  quantityAfter    Float            // 変更後の数量
  reason           String?          // 変更理由
  operatedAt       DateTime         @default(now())
  operatedBy       String           // 操作ユーザーID

  // Relations
  ingredient       Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ingredientId, operatedAt])
  @@index([operationType, operatedAt])
  @@map("ingredient_stock_histories")
}

// ==================== EVENT STORE ====================

// ==================== SHOPPING SUPPORT TABLES ====================

// Shopping session model - manages shopping mode sessions
model ShoppingSession {
  id           String          @id @default(cuid())
  userId       String          // ユーザーID（セッション所有者）
  status       String          // セッション状態 (SQLite: String)
  startedAt    DateTime        @default(now())
  completedAt  DateTime?       // セッション完了日時
  deviceType   String?         // デバイスタイプ（mobile/tablet/web）
  location     String?         // 位置情報（SQLite: String）
  metadata     String?         // その他のメタデータ（SQLite: String）
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  user         DomainUser      @relation("UserShoppingSessions", fields: [userId], references: [id], onDelete: Restrict)
  sessionItems ShoppingSessionItem[]

  // Note: SQLite doesn't support conditional unique constraints
  // Business logic should enforce one active session per user
  @@index([userId, status])
  @@index([startedAt])
  @@index([status])
  @@map("shopping_sessions")
}

// Shopping session items model - tracks checked ingredients during shopping
model ShoppingSessionItem {
  id             String         @id @default(cuid())
  sessionId      String         // 買い物セッションID
  ingredientId   String         // 食材ID
  ingredientName String         // 確認時点の食材名（スナップショット）
  stockStatus    String         // 在庫状態 (SQLite: String)
  expiryStatus   String?        // 期限状態 (SQLite: String)
  checkedAt      DateTime       @default(now())
  metadata       String?        // その他の確認時メタデータ（SQLite: String）

  // Relations
  session        ShoppingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  ingredient     Ingredient      @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  // Constraints: セッション内での食材重複確認防止
  @@unique([sessionId, ingredientId])
  @@index([sessionId])
  @@index([ingredientId])
  @@index([checkedAt])
  @@index([stockStatus])
  @@map("shopping_session_items")
}

// ==================== EVENT STORE ====================

// Domain events model - event sourcing with outbox pattern
model DomainEvent {
  id               String           @id @default(cuid())
  aggregateId      String           // 集約ID
  aggregateType    String           // 集約タイプ
  eventType        String           // イベントタイプ
  eventData        String           // SQLite: Use String instead of Json
  eventVersion     Int              // イベントバージョン
  occurredAt       DateTime         // イベント発生日時
  userId           String           // ユーザーID
  correlationId    String?          // 相関ID
  published        Boolean          @default(false) // 発行済みフラグ（アウトボックスパターン）
  publishedAt      DateTime?        // 発行日時
  createdAt        DateTime         @default(now())

  @@index([aggregateId, aggregateType, occurredAt])
  @@index([eventType, occurredAt])
  @@index([correlationId])
  @@index([published])                              // 未発行イベント検索用
  @@index([userId, eventType])                      // ユーザー別・イベントタイプ別検索用
  @@map("domain_events")
}

// ==================== VIEWS ====================

// Note: QuickAccessView is implemented as a materialized view in the database
// and accessed through raw queries or views in the application layer.
// For SQLite tests, this will be implemented as regular queries in test helpers.