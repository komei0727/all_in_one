// This is your Prisma schema file for testing with SQLite
// It mirrors the main schema but with SQLite-compatible settings

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-test"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================
// SQLite doesn't support enums, so we use strings with @db.Text

// ==================== MASTER TABLES ====================

// Category model - represents ingredient categories
model Category {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  displayOrder Int          @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  ingredients  Ingredient[]

  @@index([displayOrder])
  @@index([isActive])
  @@map("categories")
}

// Unit model - represents measurement units
model Unit {
  id           String       @id @default(cuid())
  name         String
  symbol       String       @unique
  type         String       // SQLite: Use String instead of enum
  description  String?
  displayOrder Int          @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  ingredients  Ingredient[]

  @@index([type])
  @@index([displayOrder])
  @@index([isActive])
  @@map("units")
}

// ==================== TRANSACTION TABLES ====================

// Ingredient model - main model for food ingredients
model Ingredient {
  id                    String           @id @default(cuid())
  userId                String           // 所有者のユーザーID
  name                  String
  categoryId            String
  memo                  String?          // メモ
  price                 Decimal?         // 価格
  purchaseDate          DateTime         // 購入日
  quantity              Float            // 在庫数量
  unitId                String           // 単位ID
  threshold             Float?           // 在庫閾値
  storageLocationType   String           // 保管場所タイプ (SQLite: String)
  storageLocationDetail String?          // 保管場所の詳細
  bestBeforeDate        DateTime?        // 賞味期限
  useByDate             DateTime?        // 消費期限
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  deletedAt             DateTime?        // 論理削除

  // Relations
  category         Category         @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  unit             Unit             @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stockHistories   IngredientStockHistory[]

  @@unique([userId, name, bestBeforeDate, useByDate, storageLocationType, storageLocationDetail, deletedAt])
  @@index([userId])
  @@index([categoryId])
  @@index([deletedAt])
  @@index([userId, name, deletedAt])
  @@index([bestBeforeDate, useByDate])
  @@index([storageLocationType])
  @@map("ingredients")
}


// ==================== HISTORY TABLES ====================

// Stock history model - tracks all stock changes
model IngredientStockHistory {
  id               String           @id @default(cuid())
  ingredientId     String
  operationType    String           // SQLite: Use String instead of enum
  quantityChange   Float            // 数量変更（消費時は負数）
  quantityBefore   Float            // 変更前の数量
  quantityAfter    Float            // 変更後の数量
  reason           String?          // 変更理由
  operatedAt       DateTime         @default(now())
  operatedBy       String           // 操作ユーザーID

  // Relations
  ingredient       Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ingredientId, operatedAt])
  @@index([operationType, operatedAt])
  @@map("ingredient_stock_histories")
}

// ==================== EVENT STORE ====================

// Domain events model - event sourcing
model DomainEvent {
  id               String           @id @default(cuid())
  aggregateId      String           // 集約ID
  aggregateType    String           // 集約タイプ
  eventType        String           // イベントタイプ
  eventData        String           // SQLite: Use String instead of Json
  eventVersion     Int              // イベントバージョン
  occurredAt       DateTime         // イベント発生日時
  userId           String           // ユーザーID
  correlationId    String?          // 相関ID
  createdAt        DateTime         @default(now())

  @@index([aggregateId, aggregateType, occurredAt])
  @@index([eventType, occurredAt])
  @@index([correlationId])
  @@map("domain_events")
}